import Clientes from './clientes.js';
import Contratos from './contratos.js';
import Medicoes from './medicoes.js';
import Proposta from './propostas.js';
import Versionamento from './versionamento.js';
import Anexo from './anexoVersionamento.js';
import Quantitativa from './quantitativa.js';
import DiarioDeObra  from './diarioDeObra.js';
import ItensDoDia  from './itensDoDia.js';


Clientes.hasMany(Contratos, {foreignKey: "idCliente"});
Contratos.belongsTo(Clientes, {foreignKey: "idCliente", as: "cliente_contrato"});
//Clientes.hasMany(Proposta, {foreignKey: "idCliente"})

// UM CLIENTE EST√Å ATRELADO A V√ÅRIAS PROPOSTA - 1:N
Clientes.hasMany(Proposta, {foreignKey: "idCliente"});
Proposta.belongsTo(Clientes,{foreignKey:"idCliente", as: "cliente"});

//UMA PROPOSTA TER√Å V√ÅRIOS VERSIONAMENTO - 1:N
Proposta.hasMany(Versionamento, {foreignKey: "idProposta"});

Anexo.belongsTo(Versionamento, {foreignKey: "idVersionamento"});
//Versionamento.hasMany(Anexo, {foreignKey: ""})

//N:1
Medicoes.belongsTo(Contratos);

//N:1
Quantitativa.belongsTo(Versionamento, {foreignKey: "idVersionamento"});

//1:1
Contratos.hasOne(Proposta, {foreignKey: "idProposta", as: "proposta"});

//N:1
DiarioDeObra.belongsTo(Proposta, {foreignKey: "idProposta", as: "propostaDiario" });

//N:1
ItensDoDia.belongsTo(DiarioDeObra, {foreignKey: "idDiaDeObra", as: "diaDeObra"});

/*

- 1:1 (um para um) ‚Üí .hasOne() e .belongsTo()
üëâ Um registro est√° ligado a um √∫nico do outro lado (ex: um usu√°rio tem uma carteira).
- 1:N (um para muitos) ‚Üí .hasMany() e .belongsTo()
üëâ Um registro pode se ligar a v√°rios outros (ex: um usu√°rio tem v√°rios pedidos).
- N:1 (muitos para um) ‚Üí .belongsTo()
üëâ V√°rios registros pertencem a um s√≥ (ex: v√°rios pedidos pertencem a um usu√°rio). Geralmente j√° vem embutido no ‚Äúoutro lado‚Äù do 1:N.
- N:N (muitos para muitos) ‚Üí .belongsToMany() com through
üëâ Cada lado pode se relacionar com v√°rios do outro, e precisa de uma tabela intermedi√°ria (ex: alunos e turmas).

*/
